type Announcements @model @auth(rules: [{allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Owners"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Teachers"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Students"], operations: [read]}]) {
  id: ID!
  title: String
  announcement: String
  coursesID: ID! @index(name: "byCourses")
}

enum CourseFormat {
  WEEKY
}

type Courses @model @auth(rules: [{allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Owners"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Teachers"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Students"], operations: [read]}, {allow: private, operations: [read]}]) {
  id: ID!
  course_name: String!
  course_code: String!
  course_visibility: Boolean!
  course_start_date: AWSDateTime
  course_end_date: AWSDateTime
  course_description: AWSJSON
  course_image: String
  course_format: CourseFormat
  course_credit: Int
  Announcements: [Announcements] @hasMany(indexName: "byCourses", fields: ["id"])
  Assignments: [Assignments] @hasMany(indexName: "byCourses", fields: ["id"])
  departmentsID: ID! @index(name: "byDepartments")
  users: [Users] @manyToMany(relationName: "CoursesUsers")
}

type Departments @model @auth(rules: [{allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Owners"], operations: [read, create, update, delete]}, {allow: private, operations: [read]}]) {
  id: ID!
  department_name: String
  department_id: String
  department_description: String
  Courses: [Courses] @hasMany(indexName: "byDepartments", fields: ["id"])
}

type Users @model @auth(rules: [{allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Owners"], operations: [read, create, update, delete]}]) {
  id: ID!
  email: String
  name: String
  phone: String
  address: String
  picture: String
  description: String
  department: String
  role: String
  AssignmentSubmissions: [AssignmentSubmissions] @hasMany(indexName: "byUsers", fields: ["id"])
  Courses: [Courses] @manyToMany(relationName: "CoursesUsers")
}

type AssignmentSubmissions @model @auth(rules: [{allow: public}, {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Owners"], operations: [read]}, {allow: groups, groups: ["Students"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Teachers"], operations: [read, create, update, delete]}]) {
  id: ID!
  assignmentsID: ID! @index(name: "byAssignments")
  usersID: ID! @index(name: "byUsers")
  number_of_files: Int
  grade: Int
  submission_comment: String
  checker: ID!
}

type Assignments @model @auth(rules: [{allow: private, operations: [read]}, {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Teachers"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Owners"], operations: [read, update, delete]}, {allow: groups, groups: ["Students"], operations: [read]}]) {
  id: ID!
  assignment_name: String!
  assignment_desc: String!
  resubmit: Int!
  teacher: ID!
  max_bytes: Int
  time_due: AWSDateTime
  time_available: AWSDateTime
  grade: Int!
  extra_data: AWSJSON
  AssignmentSubmissions: [AssignmentSubmissions] @hasMany(indexName: "byAssignments", fields: ["id"])
  coursesID: ID! @index(name: "byCourses")
}
